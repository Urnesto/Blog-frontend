import React from "react";
import SimpleMDE from "easymde";
import type { Doc, Editor, EditorChange, EditorChangeCancellable, EditorChangeLinkedList, EditorSelectionChange, KeyMap, LineHandle, Position } from "codemirror";
export declare type DOMEvent = "mousedown" | "dblclick" | "touchstart" | "contextmenu" | "keydown" | "keypress" | "keyup" | "cut" | "copy" | "paste" | "dragstart" | "dragenter" | "dragover" | "dragleave" | "drop";
export declare type CopyEvents = {
    [TKey in string & DOMEvent & keyof DocumentAndElementEventHandlersEventMap as `${TKey}`]?: (instance: Editor, event: DocumentAndElementEventHandlersEventMap[TKey]) => void;
};
export declare type GlobalEvents = {
    [TKey in string & DOMEvent & keyof GlobalEventHandlersEventMap as `${TKey}`]?: (instance: Editor, event: GlobalEventHandlersEventMap[TKey]) => void;
};
export declare type DefaultEvent = (instance: Editor, ...args: any[]) => void;
export declare type IndexEventsSignature = {
    [key: string]: DefaultEvent | undefined;
};
export interface SimpleMdeToCodemirrorEvents extends CopyEvents, GlobalEvents, IndexEventsSignature {
    change?: (instance: Editor, changeObj: EditorChangeLinkedList) => void;
    changes?: (instance: Editor, changes: EditorChangeLinkedList[]) => void;
    beforeChange?: (instance: Editor, changeObj: EditorChangeCancellable) => void;
    cursorActivity?: (instance: Editor) => void;
    keyHandled?: (instance: Editor, name: string, event: KeyboardEvent) => void;
    inputRead?: (instance: Editor, changeObj: EditorChange) => void;
    electricInput?: (instance: Editor, line: number) => void;
    beforeSelectionChange?: (instance: Editor, obj: EditorSelectionChange) => void;
    viewportChange?: (instance: Editor, from: number, to: number) => void;
    swapDoc?: (instance: Editor, oldDoc: Doc) => void;
    gutterClick?: (instance: Editor, line: number, gutter: string, clickEvent: MouseEvent) => void;
    gutterContextMenu?: (instance: Editor, line: number, gutter: string, contextMenu: MouseEvent) => void;
    focus?: (instance: Editor, event: FocusEvent) => void;
    blur?: (instance: Editor, event: FocusEvent) => void;
    scroll?: (instance: Editor) => void;
    refresh?: (instance: Editor) => void;
    optionChange?: (instance: Editor, option: string) => void;
    scrollCursorIntoView?: (instance: Editor, event: Event) => void;
    update?: (instance: Editor) => void;
    renderLine?: (instance: Editor, line: LineHandle, element: HTMLElement) => void;
    overwriteToggle?: (instance: Editor, overwrite: boolean) => void;
}
export declare type GetMdeInstance = (instance: SimpleMDE) => void;
export declare type GetCodemirrorInstance = (instance: Editor) => void;
export declare type GetLineAndCursor = (instance: Position) => void;
export interface SimpleMDEReactProps extends Omit<React.HTMLAttributes<HTMLDivElement>, "onChange"> {
    id?: string;
    onChange?: (value: string) => void;
    value?: string;
    extraKeys?: KeyMap;
    options?: SimpleMDE.Options;
    events?: SimpleMdeToCodemirrorEvents;
    getMdeInstance?: GetMdeInstance;
    getCodemirrorInstance?: GetCodemirrorInstance;
    getLineAndCursor?: GetLineAndCursor;
}
export declare const SimpleMdeReact: React.ForwardRefExoticComponent<SimpleMDEReactProps & React.RefAttributes<HTMLDivElement>>;
export default SimpleMdeReact;
